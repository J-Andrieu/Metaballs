#version 450

layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_out;

struct ball {
    float size;
    float pos_x;
    float pos_y;
    float vel_x;
    float vel_y;
    float r;
    float g;
    float b;
};

layout (std430, binding = 1) buffer metaball_data {
    uint numBalls;
    ball balls[];
} metaballs;

#ifdef GL_SPIRV
layout (std140, binding = 2) uniform uniforms_t {
    float radiusMult;
} uniforms_buffer;
#else
uniform float radiusMult = 100.0f;
#endif

float distance(float x1, float y1, float x2, float y2) {
    float x = pow(float(x2 - x1), 2.0f);
    float y = pow(float(y2 - y1), 2.0f);
    return sqrt(x + y);
}

void main() {
    ivec2 idx = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
    ivec2 image_size = ivec2(int(gl_NumWorkGroups.x), int(gl_NumWorkGroups.y));
    vec4 color = vec4(0, 0, 0, 1.0f);

    float posX, posY;
    posX = float(idx.x);
    posY = float(idx.y);

    float val = 0.0f;
    for (int i = 0; i < metaballs.numBalls; i++) {
        float dist = distance(posX, posY, metaballs.balls[i].pos_x, metaballs.balls[i].pos_y);
#ifdef GL_SPIRV
        val += uniforms_buffer.radiusMult * metaballs.balls[i].size / dist;
#else
        val += radiusMult * metaballs.balls[i].size / dist;
#endif
    }

    val /= 255;

    color.g = 1.0 - val;
    color.b = val;

    imageStore(img_out, idx, color);
}