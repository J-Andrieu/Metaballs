#version 430

layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_out;

layout (std430, binding = 1) buffer metaball_data {
    uint numBalls;
    struct {
        float size;
        float pos_x;
        float pos_y;
        float vel_x;
        float vel_y;
        float r;
        float g;
        float b;
    } balls[];
} metaballs;

uniform float sumThresh = 5;

float distance(float x1, float y1, float x2, float y2) {
    float x = x2 - x1;
    x = pow(x, 2);
    float y = y2 - y1;
    y = pow(y, 2);
    return sqrt(x + y);
}

void main() {
    ivec2 idx = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
    ivec2 image_size = ivec2(int(gl_NumWorkGroups.x), int(gl_NumWorkGroups.y));
    vec4 color = vec4(0, 0, 0, 1.0f);

    float posX, posY;
    posX = float(idx.x);
    posY = float(idx.y);
    float sum = 0;
    int closestIndex = 0;
    float minDistance = 100000;
    bool valid = false;
    for (int i = 0; i < metaballs.numBalls; i++) {
        float dist = distance(posX, posY, metaballs.balls[i].pos_x, metaballs.balls[i].pos_y);
        sum += metaballs.balls[i].size / dist;
        if (dist < minDistance) {
            minDistance = dist;
            closestIndex = i;
        }
    }

    if (sum > sumThresh) {
        color.r = metaballs.balls[closestIndex].r;
        color.g = metaballs.balls[closestIndex].g;
        color.b = metaballs.balls[closestIndex].b;
    }

    imageStore(img_out, idx, color);
}