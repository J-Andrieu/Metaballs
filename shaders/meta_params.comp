#version 430

layout (local_size_x = 1, local_size_y = 1) in;
layout (rgba32f, binding = 0) uniform image2D img_out;

layout (std430, binding = 1) buffer metaball_data {
    uint numBalls;
    struct {
        float size;
        float pos_x;
        float pos_y;
        float vel_x;
        float vel_y;
        float r;
        float g;
        float b;
    } balls[];
} metaballs;

uniform float radiusMult = 400.0f;
uniform bool red = true;
uniform bool green = false;
uniform bool blue = false;
uniform bool high = false;

float distance(float x1, float y1, float x2, float y2) {
    float x = x2 - x1;
    x = pow(x, 2);
    float y = y2 - y1;
    y = pow(y, 2);
    return sqrt(x + y);
}

void main() {
    ivec2 idx = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
    ivec2 image_size = ivec2(int(gl_NumWorkGroups.x), int(gl_NumWorkGroups.y));
    vec4 color;

    float posX, posY;
    posX = float(idx.x);
    posY = float(idx.y);

    float val = 0.0f;
    for (int i = 0; i < metaballs.numBalls; i++) {
        float dist = distance(posX, posY, metaballs.balls[i].pos_x, metaballs.balls[i].pos_y);
        val += radiusMult * metaballs.balls[i].size / dist;
    }

    val /= 255;
    if (high) {
        color = vec4(1.0f, 1.0f, 1.0f, 1.0f);
        if (red) {
            color.r = 1 - val;
        }
        if (green) {
            color.g = 1 - val;
        }
        if (blue) {
            color.b = 1 - val;
        }
    } else {
        color = vec4(0.0f, 0.0f, 0.0f, 1.0f);
        if (red) {
            color.r = val;
        }
        if (green) {
            color.g = val;
        }
        if (blue) {
            color.b = val;
        }
    }

    color.a = 1.0f;

    imageStore(img_out, idx, color);
}