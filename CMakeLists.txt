PROJECT(metaballs)
CMAKE_MINIMUM_REQUIRED(VERSION 3.6)

ADD_CUSTOM_TARGET(run
    COMMAND ${PROJECT_NAME}
    DEPENDS ${PROJECT_NAME}
    WORKING_DIRECTORY ${CMAKE_PROJECT_DIR}
)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/CMakeModules")

IF(POLICY CMP0072)
  cmake_policy(SET CMP0072 NEW)
ENDIF()

FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(SDL2 REQUIRED)

IF(CMAKE_BUILD_TYPE MATCHES Debug)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb3 -fsanitize=address")
  ADD_DEFINITIONS(-DDEBUG)
ENDIF(CMAKE_BUILD_TYPE MATCHES Debug)

SET(CXX11_FLAGS "-pthread -std=gnu++17 -O3")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXX11_FLAGS}")

IF(UNIX)
  ADD_DEFINITIONS(-DUNIX)
ENDIF(UNIX)

IF(NOT APPLE)
  IF(GLEW_FOUND)
      INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
      LINK_LIBRARIES(${GLEW_LIBRARIES})
  ENDIF(GLEW_FOUND)
ENDIF(NOT APPLE)

INCLUDE_DIRECTORIES(
  "${PROJECT_SOURCE_DIR}/include"
  "${PROJECT_SOURCE_DIR}/include/general_tools"
  "${PROJECT_SOURCE_DIR}/include/general_tools/imgui"
  ${SDL2_INCLUDE_DIR}
)

# Set Includes
SET(INCLUDES ${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${INCLUDES})

# Set sources
FILE(GLOB_RECURSE MAIN_SOURCES "src/*.cpp" "src/general_tools/*.cpp" "src/general_tools/imgui/*.cpp")
LIST(REMOVE_ITEM MAIN_SOURCES "${PROJECT_SOURCE_DIR}/src/test_app.cpp")
ADD_EXECUTABLE(${PROJECT_NAME} ${MAIN_SOURCES})


FILE(GLOB_RECURSE TEST_SOURCES "src/test_app.cpp" "src/general_tools/*.cpp" "src/general_tools/imgui/*.cpp")
ADD_EXECUTABLE("test_app" ${TEST_SOURCES})

ADD_CUSTOM_TARGET("${PROJECT_NAME}_SUCCESSFUL" ALL
                  DEPENDS ${PROJECT_NAME}
                  COMMAND ${CMAKE_COMMAND} -E echo ""
                  COMMAND ${CMAKE_COMMAND} -E echo "====================="
                  COMMAND ${CMAKE_COMMAND} -E echo "  Compile complete!"
                  COMMAND ${CMAKE_COMMAND} -E echo "====================="
                  COMMAND ${CMAKE_COMMAND} -E echo "${CMAKE_CURRENT_BINARY_DIR}"
                 )

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OPENGL_LIBRARY} ${SDL2_LIBRARY})
TARGET_LINK_LIBRARIES("test_app" ${OPENGL_LIBRARY} ${SDL2_LIBRARY})
